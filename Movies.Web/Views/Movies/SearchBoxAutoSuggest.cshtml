@using  Movies.Web.Models.Movies

<script src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
<script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
<script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
<script src="https://unpkg.com/react-autosuggest@9.3.4/dist/standalone/autosuggest.js"></script>

<section class="searchform">
    <input type="hidden" id="apikey" value="@ViewBag.APIKey" />
    <form class="form-inline" action="/Movies/Details/" method="get">
        <div class="form-group mb-2">
            <div id="app"></div>
        </div>
        <button type="submit" class="btn btn-primary mb-2">Search</button>
    </form>
</section>

<style>

.status {
  line-height: 52px;
}

.react-autosuggest__container {
  position: relative;
}

.react-autosuggest__input {
  width: 240px;
  height: 30px;
  padding: 10px 20px;
  font-family: Helvetica, sans-serif;
  font-weight: 300;
  font-size: 16px;
  border: 1px solid #aaa;
  border-radius: 4px;
}

.react-autosuggest__input--focused {
  outline: none;
}

.react-autosuggest__input--open {
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

.react-autosuggest__suggestions-container {
  display: none;
}

.react-autosuggest__suggestions-container--open {
  display: block;
  position: absolute;
  top: 51px;
  width: 280px;
  border: 1px solid #aaa;
  background-color: #fff;
  font-family: Helvetica, sans-serif;
  font-weight: 300;
  font-size: 16px;
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px;
  z-index: 2;
}

.react-autosuggest__suggestions-list {
  margin: 0;
  padding: 0;
  list-style-type: none;
}

.react-autosuggest__suggestion {
  cursor: pointer;
  padding: 10px 20px;
}

.react-autosuggest__suggestion--highlighted {
  background-color: #ddd;
}

</style>

<div id="app"></div>



<script type="text/babel">

/* ----------- */
/*    Utils    */
/* ----------- */

function escapeRegexCharacters(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

/* --------------- */
/*    Component    */
/* --------------- */

function getSuggestionValue(suggestion) {
  return suggestion.name;
}

function renderSuggestion(suggestion) {
  return (
    <span>{suggestion.name} ({suggestion.year})</span>
  );
}

class App extends React.Component {
  constructor() {
    super();

    this.state = {
      value: '',
	  titleid: '',
      suggestions: [],
      isLoading: false
    };
    
    this.cache = {
      [this.state.value]: this.state.suggestions
    };
  }
  
  loadSuggestions(value) {
    const cacheKey = value.trim().toLowerCase();
    
    if (this.cache[cacheKey]) {
      this.setState({
        suggestions: this.cache[cacheKey]
      });
    } else {
      this.setState({
        isLoading: true
      });

		var searchValue = escapeRegexCharacters(value.trim());
		var apikey = document.getElementById('apikey').value;
		
		let url = `//www.omdbapi.com/?apikey=${apikey}&s=${searchValue}`;
		
		fetch(url).then( (response) => {
		  return response.json();
		}).then((results) => {
		  if(results.Search != undefined) {
			let items = results.Search.map( (res, i) => { return { id: i, name: res.Title, value: res.imdbID, year: res.Year } });
			var suggestions = items;
			
			if (value === this.state.value) {
				this.cache[cacheKey] = suggestions;

				this.setState({
					isLoading: false,
					suggestions
				});
			} else { // Ignore suggestions if input value changed
				this.setState({
					isLoading: false
				});
			}
          }
          });
    }
  }

  onChange = (event, { newValue }) => {
    this.setState({
      value: newValue
    });
  };
  
  onSuggestionsFetchRequested = ({ value }) => {
    this.loadSuggestions(value);
  };

  onSuggestionsClearRequested = () => {
    this.setState({
      suggestions: []
    });
  };
  
  onSuggestionSelected = (event, { suggestion }) => {
    this.setState({
      titleid: suggestion.value
    });
  };
  

  render() {
    const { value, titleid, suggestions, isLoading } = this.state;
    const inputProps = {
	  id: "title",
	  name: "title",
      className: "form-control mr-2",
      required: "required",
      placeholder: "Quick search...",
      value,
      onChange: this.onChange
    };

    const status = (isLoading ? 'Loading...' : '');

    return (
      <div>
	    <input type="hidden" id="id" name="id" value={titleid} />	  
        <Autosuggest
          suggestions={suggestions}
          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}
          onSuggestionsClearRequested={this.onSuggestionsClearRequested}
		  onSuggestionSelected={this.onSuggestionSelected}
          getSuggestionValue={getSuggestionValue}
          renderSuggestion={renderSuggestion}
          inputProps={inputProps} />

      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('app'));

</script>

